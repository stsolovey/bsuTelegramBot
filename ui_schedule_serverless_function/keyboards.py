import os
import telebot
from telebot import types

from ydb_data import get_user, set_notify_every_day, set_notify_before_lessons, set_last_seen, increment_user_action_counter
from local_data import get_schedule_type_from_user, get_group_number_from_user, get_teacher_name_from_user
from emoji import random_smileys, random_upside_down, random_negative, random_negative_funny, random_current_week
from emoji import random_positive, random_notification, random_schedule, random_settings, random_teacher

bot = telebot.TeleBot(os.environ.get('BOT_TOKEN'))


def keyboard_settings(message):
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton(random_schedule() + " –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule_settings")
    item2 = types.InlineKeyboardButton(random_notification() + " –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings")
    item3 = types.InlineKeyboardButton("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", callback_data="main_schedule_picker")

    markup.add(item1, item2, item3)

    bot.edit_message_text(chat_id=message.chat.id, 
                          message_id=message.message_id, 
                          text= random_settings() + ' –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', 
                          reply_markup=markup )
                     
def keyboard_notification_settings(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ", callback_data="everyday_notifications")
    item2 = types.InlineKeyboardButton("üìã –ü–µ—Ä–µ–¥ –∑–∞–Ω—è—Ç–∏—è–º–∏", callback_data="before_lessons_notifications")
    item3 = types.InlineKeyboardButton("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", callback_data="settings")

    markup.add(item1, item2, item3)
    bot.edit_message_text(chat_id=message.chat.id, 
                          message_id=message.message_id, 
                          text= random_settings() + random_notification() + ' –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', 
                          reply_markup=markup )

def keyboard_schedule_type(message):
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("üëØüëØüëØ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", callback_data="student")
    item2 = types.InlineKeyboardButton(random_teacher() + " –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="teacher")

    if message.from_user.is_bot:
        user_id = message.chat.id
        edit_message = True
    else:
        user_id = message.from_user.id
        edit_message = False
    user_exists, user = get_user(user_id)

    if user_exists:
        item3 = types.InlineKeyboardButton("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", callback_data="settings")
        markup.add(item1, item2, item3, )
    else:
        markup.add(item1, item2, )
    
    bot.edit_message_text(chat_id=message.chat.id, 
                          message_id=message.message_id, 
                          text= random_settings() + random_schedule() + ' –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', # ‚öôÔ∏èüìã 
                          reply_markup=markup )

def show_shedule_picker(message):
    set_last_seen
    markup = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today_schedule")
    item2 = types.InlineKeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞", callback_data="tomorrow_schedule")
    item3 = types.InlineKeyboardButton(random_schedule() + " –î–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏", callback_data="thisweekfromtoday_schedule") #üìã
    item4 = types.InlineKeyboardButton(random_current_week() + " –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="thisweek_schedule") # üê≥
    item5 = types.InlineKeyboardButton("üîÆ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="nextweek_schedule")
    item6 = types.InlineKeyboardButton(random_settings() + " –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")

    markup.add(item1, item2)  # First row, two columns
    markup.add(item3, item4)  # Second row, two columns
    markup.add(item5)         # Third row, one column
    markup.add(item6)         # Fourth row, one column

    if message.from_user.is_bot:
        user_id = message.chat.id
        edit_message = True
    else:
        user_id = message.from_user.id
        edit_message = False


    user_exists, user = get_user(user_id)

    if user_exists:
        set_last_seen(user_id)
        increment_user_action_counter(user_id)
        schedule_type = get_schedule_type_from_user(user)
        if schedule_type=='student':
            group_number = get_group_number_from_user(user)
            title_text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {} {}".format(group_number, random_smileys())

        if schedule_type=='teacher':
            teacher_name = get_teacher_name_from_user(user)
            title_text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {} {}".format(random_teacher(), teacher_name)
 
        if edit_message:
            bot.edit_message_text(chat_id=message.chat.id, 
                            message_id=message.message_id, 
                            text=title_text, 
                            reply_markup=markup )
        else:
            bot.send_message(message.chat.id,
                        title_text,
                        reply_markup=markup)

    else:
        bot.send_message(message.chat.id,
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                        parse_mode='markdown')

def keyboard_set_everyday_time_notification(message):

    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("üåÖüç≥‚òï 0Ô∏è‚É£8Ô∏è‚É£:0Ô∏è‚É£0Ô∏è‚É£", callback_data="set_eight_am")
    item2 = types.InlineKeyboardButton("üåÉüåïüî≠ 2Ô∏è‚É£0Ô∏è‚É£:0Ô∏è‚É£0Ô∏è‚É£", callback_data="set_eight_pm")
    item3 = types.InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å " + random_upside_down(), 
                                       callback_data="stop_everyday_notification")
    item4 = types.InlineKeyboardButton("üèÉ‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", callback_data="notification_settings")
    markup.add(item1, item2, item3, item4, )
    
    bot.edit_message_text(chat_id=message.chat.id, 
                          message_id=message.message_id, 
                          text='''üîî–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (M—Å–∫):''', 
                          reply_markup=markup )

def keyboard_set_everyday_notification(message, time):

    set_notify_every_day(message.chat.id, time)
    if time == "08:00":
        replay_message = """–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ\n—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 0Ô∏è‚É£8Ô∏è‚É£:0Ô∏è‚É£0Ô∏è‚É£ üòè"""
    elif time == "20:00":
        replay_message = """–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ\n—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 2Ô∏è‚É£0Ô∏è‚É£:0Ô∏è‚É£0Ô∏è‚É£ üôÇ"""
    else:
        replay_message = """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ üõëüòâ"""

    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", callback_data="everyday_notifications")
    item2 = types.InlineKeyboardButton("‚¨ÖÔ∏è‚¨ÖÔ∏è –≤ –Ω–∞—á–∞–ª–æ ‚¨ÖÔ∏è‚¨ÖÔ∏è", callback_data="main_schedule_picker")
    markup.add(item1, item2)
    
    bot.edit_message_text(chat_id=message.chat.id, 
                          message_id=message.message_id, 
                          text=replay_message, 
                          reply_markup=markup )

def keyboard_set_before_lesson_notification(message):
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton(random_positive() + " –í–∫–ª—é—á–∏—Ç—å  ", callback_data="turn_on_before_lesson_notification")
    item2 = types.InlineKeyboardButton(random_negative_funny() + " –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="turn_off_before_lesson_notification")
    item3 = types.InlineKeyboardButton("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", callback_data="notification_settings")
    markup.add(item1, item2, item3,)
    
    bot.edit_message_text(chat_id=message.chat.id, 
                          message_id=message.message_id, 
                          text=random_notification() + ' –ü–µ—Ä–µ–¥ –∑–∞–Ω—è—Ç–∏—è–º–∏:', 
                          reply_markup=markup )

def keyboard_switch_before_lesson_notification(message, bool_flag):
    set_notify_before_lessons(message.chat.id, bool_flag)

    if bool_flag:
        replay_message = """–í–∫–ª—é—á–µ–Ω–æ! üòä"""
    else:
        replay_message = """–í—ã–∫–ª—é—á–µ–Ω–æ! üòú"""

    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("üèÉüèª‚Äç‚ôÇÔ∏è‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", callback_data="before_lessons_notifications")
    item2 = types.InlineKeyboardButton("‚¨ÖÔ∏è‚¨ÖÔ∏è –≤ –Ω–∞—á–∞–ª–æ ‚¨ÖÔ∏è‚¨ÖÔ∏è", callback_data="main_schedule_picker")
    markup.add(item1, item2)
    
    bot.edit_message_text(chat_id=message.chat.id, 
                          message_id=message.message_id, 
                          text=replay_message, 
                          reply_markup=markup )


def keyboard_schedule_window(message, schedule, title):
    title_schedule = title +" "+ random_smileys() +"\n"+ schedule

    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", callback_data="main_schedule_picker")
    markup.add(item1)
    
    bot.edit_message_text(chat_id=message.chat.id, 
                          message_id=message.message_id, 
                          text=title_schedule, 
                          reply_markup=markup,
                          parse_mode='markdown' )

def keyboard_ask_for_input(message, schedule_type):
    if schedule_type == 'student':
        text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, 8 —Ü–∏—Ñ—Ä:"
        #save message id, save state
    if schedule_type == 'teacher':
        text = "–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é:"
        #save message id, save state

    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", callback_data="schedule_settings")
    markup.add(item1)

    bot.edit_message_text(chat_id=message.chat.id, 
                          message_id=message.message_id, 
                          text=text, 
                          reply_markup=markup,
                          parse_mode='markdown' )